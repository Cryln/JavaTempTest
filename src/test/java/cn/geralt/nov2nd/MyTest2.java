package cn.geralt.nov2nd;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

public class MyTest2 {

    static Stream<Arguments> get(){
        return Stream.of(Arguments.arguments(
//                new int[]{1 ,2 ,3 ,4, 5, 6 ,7},
                (Object) new int[]{999999 ,33 ,91 ,139 ,193 ,258 ,262 ,308,318,324,361,401,403,435,513,572,634,646,733,
                        778,785,827,902,964,1015,1078,1144,1164,1212,1250,1277,1354,1445,1503,1512,1552,1598,1665,1706,
                        1715,1738,1758,1834,1859,1862,1919,2004,2026,2087,2183,2259,2267,2270,2359,2411,2508,2527,2548,
                        2568,2644,2686,2758,2822,2914,2988,2999,3073,3104,3188,3188,3284,3289,3309,3394,3485,3576,3595,
                        3620,3654,3706,3764,3844,3935,3981,4062,4063,4063,4079,4118,4188,4246,4325,4345,4394,4456,4554,
                        4632,4669,4678,4692,4744,4774,4792,4833,4929,4937,4954,5021,5049,5145,5176,5263,5346,5408,5507,
                        5555,5589,5680,5719,5738,5775,5797,5868,5870,5920,5981,6061,6066,6117,6201,6226,6266,6284,6366,
                        6397,6439,6482,6484,6559,6599,6652,6672,6760,6777,6811,6851,6944,6973,7009,7068,7096,7147,7221,
                        7310,7357,7404,7488,7506,7557,7632,7706,7777,7872,7962,8061,8093,8159,8230,8282,8297,8377,8404,
                        8474,8474,8500,8541,8615,8634,8722,8791,8803,8860,8895,8962,9036,9090,9117,9198,9216,9294,9341,
                        9389,9446,9466,9544,9551,9576,9615,9675,9683,9768,9799,9836,9843,9846,9869,9906,9906,9937,10008,
                        10065,10105,10107,10131,10168,10267,10329,10368,10379,10440,10508,10566,10617,10652,10665,10686,
                        10745,10772,10817,10874,10898,10940,11001,11007,11049,11101,11157,11219,11243,11260,11293,11332,
                        11396,11439,11502,11587,11601,11629,11689,11751,11841,11914,11944,12002,12085,12117,12136,12139,
                        12220,12234,12290,12342,12421,12428,12500,12563,12573,12671,12689,12770,12798,12854,12926,12995,
                        13091,13132,13161,13182,13271,13348,13374,13394,13439,13443,13495,13529,13569,13580,13629,13691,
                        13768,13865,13901,13946,14030,14112,14118,14214,14267,14273,14364,14456,14520,14617,14657,14732,
                        14830,14920,15010,15036,15063,15141,15151,15155,15202,15293,15320,15378,15468,15524,15605,15702,
                        15773,15868,15915,15927,15967,15991,16006,16009,16049,16084,16180,16210,16267,16296,16325,16403,
                        16408,16419,16499,16587,16650,16730,16764,16848,16873,16917,16982,17007,17083,17143,17229,17279,
                        17321,17413,17444,17524,17579,17614,17702,17751,17810,17847,17849,17897,17900,17919,18014,18080,
                        18090,18105}
        ));
    }

    @ParameterizedTest
    @MethodSource("get")
    void test5(int[] input){
        boolean flag = (input[0]<input[input.length-1]);
        if(flag) {
            System.out.println(input[0]);
            return;
        }
        else{
            int mid;
            int left = 0;
            int right = input.length-1; //inclusive
            while(true){
                int temp = (int)Math.ceil((left + right)/2); //ceil
                mid = input[temp];
                if(mid<input[0]){ // right part
                    right = temp;
                    if(mid<input[temp-1]){
                        System.out.println(mid);
                        return;
                    }
                }else{  // left partw
                    left = temp;
                    if(mid>input[temp+1]){
                        System.out.println(input[temp+1]);
                        return;
                    }
                }

            }

        }
    }
}
